using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MetroFramework.Forms;
using System.Data.SqlClient;
using System.IO;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.html.simpleparser;
using DevComponents.WinForms;
using DevComponents.DotNetBar.Controls;


namespace productionMonitoringSystem06302016
{
    public partial class reportForm : MetroForm 
    {
        public reportForm()
        {
            InitializeComponent();
           
            listOfReports();
            listOfUser();
            listOfClients();
           
        }
        private void reportForm_Load(object sender, EventArgs e)
        {
        
        }  
          private void displayReports()
          {
              disablebtton();
              string eName = metroComboBox2.Text;
              if (metroCheckBox1.Checked)
              {
                  eName = "";
                  metroComboBox2.Enabled = false;
              }
              else
              {
                  metroComboBox2.Enabled = true;
              }

              string CName = metroComboBox3.Text;
              if (metroCheckBox2.Checked)
              {
                  CName = "";
                  metroComboBox3.Enabled = false;
              }
              else
              {
                  metroComboBox3.Enabled = true;
              }

            sqlcon userConnect = new sqlcon();
            userConnect.dbIn();
            SqlCommand recipe = new SqlCommand("exec [" + metroComboBox1.Text + "] '" + metroDateTime1.Value + "','" + metroDateTime2.Value + "','" + eName + "','" + CName + "'", sqlcon.calc);
            SqlDataAdapter calculated = new SqlDataAdapter();
            calculated.SelectCommand = recipe;
            DataTable dataSet = new DataTable();
            calculated.Fill(dataSet);
            BindingSource nSource = new BindingSource();
            nSource.DataSource = dataSet;
            metroGrid1.DataSource = nSource;
            calculated.Update(dataSet);
            userConnect.dbOut();
          }//Heart of the string
          private void metroComboBox1_SelectedIndexChanged(object sender, EventArgs e)
          {
              if (metroComboBox1.Text != "Finish Products Sold Report") { metroComboBox3.Visible = false; metroLabel5.Visible = false; metroCheckBox2.Visible = false; metroCheckBox2.CheckState = CheckState.Checked; }
              else { metroComboBox3.Visible = true; metroLabel5.Visible = true; metroCheckBox2.Visible = true; }
          }
          private void metroDateTime1_ValueChanged(object sender, EventArgs e)
          {
              displayReports();
          }
          private void metroDateTime2_ValueChanged(object sender, EventArgs e)
          {
              if (metroDateTime1.Value > metroDateTime2.Value)
              {
                  //MessageBox.Show("The date you entered is INVALID !!");
                  DesktopAlert.Show("The date you entered is INVALID !!");
              }
              else
              {
                  displayReports();
              }
          }
          private void listOfUser() //provide the client list for combobox
          {
              sqlcon userConnect = new sqlcon();
              userConnect.dbIn();
              SqlDataAdapter da = new SqlDataAdapter("exec [userList]", sqlcon.con);
              DataTable dt = new DataTable();
              da.Fill(dt);
              metroComboBox2.DataSource = dt;
              metroComboBox2.DisplayMember = "NAMES";
              userConnect.dbOut();
          }
          private void listOfReports() //provide the client list for combobox
          {
              sqlcon userConnect = new sqlcon();
              userConnect.dbIn();
              SqlDataAdapter da = new SqlDataAdapter("exec [reportsList]", sqlcon.calc);
              DataTable dt = new DataTable();
              da.Fill(dt);
              metroComboBox1.DataSource = dt;
              metroComboBox1.DisplayMember = "name".ToString();
              userConnect.dbOut();
          }
          private void metroComboBox2_SelectedIndexChanged(object sender, EventArgs e)
          {
              displayReports();
          }
          private void metroCheckBox1_CheckedChanged(object sender, EventArgs e)
          {
              displayReports();
          }
          private void metroComboBox1_Click(object sender, EventArgs e)
          {
              displayReports();
          }
          private void metroComboBox1_MouseLeave(object sender, EventArgs e)
          {
              displayReports();
          }
          private void metroComboBox1_MouseHover(object sender, EventArgs e)
          {
              displayReports();
          }
          private void metroDateTime1_MouseHover(object sender, EventArgs e)
          {
              displayReports();
          }
          private void reportForm_MouseHover(object sender, EventArgs e)
          {
              displayReports();
          }
          private void metroTabPage1_MouseHover(object sender, EventArgs e)
          {
              displayReports();
          }
          private void buttonX1_Click(object sender, EventArgs e)
          {

          }
          private void metroButton1_Click(object sender, EventArgs e)
          {

              SaveFileDialog savefiledialog1 = new SaveFileDialog();
              savefiledialog1.FileName = "Quotation report " + (DateTime.Now.ToLongDateString());;
              savefiledialog1.Filter = "PDF Files|*.pdf";
              
              

              if (savefiledialog1.ShowDialog() == DialogResult.OK)

              {
                  //using (Stream save = File.Open(savefiledialog1.FileName, FileMode.Create))
                  //using (StreamWriter sw = new StreamWriter(save))
                  
                  {
                      //string x = "@\"" + "" + savefiledialog1.FileName + "\"";
                      //StringBuilder  strBuf = new StringBuilder ();
                      //strBuf.Append(x);
                      Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 42, 35);
                      PdfWriter wri = PdfWriter.GetInstance(doc, new FileStream(savefiledialog1.FileName, FileMode.Create));
                      //MessageBox.Show(x);
                      doc.Open();
                      iTextSharp.text.Image PNG = iTextSharp.text.Image.GetInstance("TexiconLogo.png");
                      PNG.ScaleAbsolute(250, 125);
                      PNG.SetAbsolutePosition(175, 660);
                      PNG.SpacingAfter = 70f;
                      doc.Add(PNG);
                      
                      Paragraph para2 = new Paragraph("Printed By:", FontFactory.GetFont("Segoe UI", 9f, iTextSharp.text.Font.ITALIC, BaseColor.BLACK));
                      para2.SpacingBefore = 70f;
                      para2.SpacingAfter = .50f;
                      para2.IndentationLeft = 15f;
                      doc.Add(para2); 
                      Paragraph para4 = new Paragraph(globalVar.name +", " + globalVar.position);
                      para4.SpacingAfter = .50f;
                      para4.IndentationLeft = 15f;
                      para4.Font.Size = 9;
                      doc.Add(para4);
                      Paragraph para5 = new Paragraph(DateTime.Now.ToLongDateString());
                      para5.SpacingAfter = 10f;
                      para5.IndentationLeft = 15f;
                      para5.Font.Size = 9;
                      doc.Add(para5);
                      

                      PdfPTable table = new PdfPTable(metroGrid1.Columns.Count);

                      for (int j = 0; j < metroGrid1.Columns.Count; j++)
                      {
                          PdfPCell cell = new PdfPCell(new Phrase(metroGrid1.Columns[j].HeaderText, FontFactory.GetFont("Times New Roman", 8f, iTextSharp.text.Font.BOLD, BaseColor.WHITE)));
                          cell.BackgroundColor = new iTextSharp.text.BaseColor(System.Drawing.ColorTranslator.FromHtml("#9DA2A3"));
                          cell.HorizontalAlignment = 1;
                          table.AddCell(cell);
                      }
                      table.HeaderRows = 1;
                      for (int i = 0; i < metroGrid1.Rows.Count; i++)
                      {
                          for (int k = 0; k < metroGrid1.Columns.Count; k++)
                          {
                              PdfPCell cell2 = new PdfPCell(new Phrase(metroGrid1[k, i].Value.ToString(), FontFactory.GetFont("Times New Roman", 7f, iTextSharp.text.Font.NORMAL, BaseColor.BLACK)));
                             
                              if (i % 2 != 0)
                              {
                                  cell2.BackgroundColor = new iTextSharp.text.BaseColor(System.Drawing.ColorTranslator.FromHtml("#C4C4C4"));
                              }

                              cell2.HorizontalAlignment = 1;
                              table.AddCell(cell2);
                          }
                      }
                      doc.Add(table);
                      doc.Close();
                      System.Diagnostics.Process.Start(savefiledialog1.FileName);
                  }
              }
          }
          public void listOfClients() //provide the client list for combobox
          {
              sqlcon userConnect = new sqlcon();
              userConnect.dbIn();
              SqlDataAdapter da = new SqlDataAdapter("exec [clientList]", sqlcon.con);
              DataTable dt = new DataTable();
              da.Fill(dt);
              metroComboBox3.DataSource = dt;
              metroComboBox3.DisplayMember = "ClientName";
              userConnect.dbOut();
          }
          private void disablebtton()
          {
              if (metroGrid1.Rows.Count > 1)
              { metroButton1.Enabled = true;} 
              else
              { metroButton1.Enabled = false;}
             
          }

          private void metroGrid1_CellContentClick(object sender, DataGridViewCellEventArgs e)
          {

          }

          private void metroTabControl1_SelectedIndexChanged(object sender, EventArgs e)
          {

          }
    }
}
